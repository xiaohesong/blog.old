<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Rails中的sql小记]]></title>
    <url>%2F2017%2F08%2F07%2FRails%E4%B8%AD%E7%9A%84sql%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Rails中的Sql小记关于joinsql中的join left join 12select count(distinct store_name) from scores left join stores on scores.scoreable_id = stores.id and scores.scoreable_type = 'Store' where store.status = 0 and scores.user_type=0;# 这个是查询 所有带有评分的门店,并且门店是营业状态(0)和评分的类型是用户评分(0) right join和left join差不多.不过这个是以右表全表为基础进行处理. inner join 1SELECT `companies`.* FROM `companies` INNER JOIN `departments` ON `departments`.`company_id` = `companies`.`id` rails中的join joins12Company.joins(:departments).to_sql# =&gt; SELECT `companies`.* FROM `companies` INNER JOIN `departments` ON `departments`.`company_id` = `companies`.`id` 可以发现,rails中的joins对应sql中的inner join. includes 12Company.includes(:departments).where(departments: &#123;department_name: '#'&#125;).first# =&gt; SELECT DISTINCT `companies`.`id`, `companies`.`id` AS alias_0 FROM `companies` LEFT OUTER JOIN `departments` ON `departments`.`company_id` = `companies`.`id` WHERE `departments`.`department_name` = '#' ORDER BY `companies`.`id` ASC LIMIT 1 可以发现,有一个LEFT OUTER JOIN.是不是和left join很像. 小结对应的关系 join就是inner join, inner是可选的. left outer join就是left join, outer是可选的. 具体的可查看此链接 其他方法 sum 1SUM(CASE WHEN num &gt; 0 THEN 1 else 0 END) AS available_times round 12ROUND('123.654',2)# 123.654 取小数后两位 GROUP_CONCAT/CONCAT返回拼接的字符串. GROUP_CONCAT与group by配合使用,效果更佳. 原文链接]]></content>
      <tags>
        <tag>rails</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用monit监控rails应用]]></title>
    <url>%2F2017%2F08%2F04%2F%E4%BD%BF%E7%94%A8monit%E7%9B%91%E6%8E%A7rails%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[monit的安装，ubuntu可以直接安装 1sudo apt-get install monit 这样就安装好了．然后我们看下配置文件,在 /etc/monit/monitrc : 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279################################################################################# Monit control file################################################################################### Comments begin with a '#' and extend through the end of the line. Keywords## are case insensitive. All path's MUST BE FULLY QUALIFIED, starting with '/'.#### Below you will find examples of some frequently used statements. For## information about the control file and a complete list of statements and## options, please have a look in the Monit manual.##################################################################################### Global section################################################################################### Start Monit in the background (run as a daemon):# set daemon 30 # check services at 2-minute intervals, current is 30 second# with start delay 240 # optional: delay the first check by 4-minutes (by# # default Monit check immediately after Monit start)#### Set syslog logging with the 'daemon' facility. If the FACILITY option is## omitted, Monit will use 'user' facility by default. If you want to log to## a standalone log file instead, specify the full path to the log file## set logfile syslog facility log_daemon set logfile /var/log/monit.log # 下面的是163的邮箱服务器,请注意端口是ssl或者非ssl情况. # set mailserver smtp.163.com username "name@163.com" password "pwd" using sslv3 # 下面的这个是万网的邮箱服务器 set mailserver smtp.mxhichina.com username "name@domain.com" password "pwd" using sslv3 with timeout 30 seconds # 这个是邮件接收者 set alert receive@mail.com # 这个是邮件格式，可以自己定义. set mail-format &#123; from: name@domain.com subject: monit alert -- $EVENT $SERVICE message: $EVENT Service $SERVICE Date: $DATE Action: $ACTION Host: $HOST Description: $DESCRIPTION Your faithful employee, Monit &#125;## Set the location of the Monit id file which stores the unique id for the## Monit instance. The id is generated and stored on first Monit start. By## default the file is placed in $HOME/.monit.id.## set idfile /var/.monit.id set idfile /var/lib/monit/id### Set the location of the Monit state file which saves monitoring states## on each cycle. By default the file is placed in $HOME/.monit.state. If## the state file is stored on a persistent filesystem, Monit will recover## the monitoring state across reboots. If it is on temporary filesystem, the## state will be lost on reboot which may be convenient in some situations.# set statefile /var/lib/monit/state### Set the list of mail servers for alert delivery. Multiple servers may be## specified using a comma separator. If the first mail server fails, Monit# will use the second mail server in the list and so on. By default Monit uses# port 25 - it is possible to override this with the PORT option.## By default Monit will drop alert events if no mail servers are available.## If you want to keep the alerts for later delivery retry, you can use the## EVENTQUEUE statement. The base directory where undelivered alerts will be## stored is specified by the BASEDIR option. You can limit the maximal queue## size using the SLOTS option (if omitted, the queue is limited by space## available in the back end filesystem).# set eventqueue basedir /var/lib/monit/events # set the base directory where events will be stored slots 100 # optionally limit the queue size### Monit by default uses the following format for alerts if the the mail-format## statement is missing::## --8&lt;--## --8&lt;--#### You can override this message format or parts of it, such as subject## or sender using the MAIL-FORMAT statement. Macros such as $DATE, etc.## are expanded at runtime. For example, to override the sender, use:## set mail-format &#123; from: monit@foo.bar &#125;# 监控网页应用check system domain.com if loadavg (1min) &gt; 4 then alert if loadavg (5min) &gt; 2 then alert if memory usage &gt; 75% then alert if swap usage &gt; 25% then alert if cpu usage (user) &gt; 70% then alert if cpu usage (system) &gt; 30% then alert if cpu usage (wait) &gt; 20% then alert### You can set alert recipients whom will receive alerts if/when a## service defined in this file has errors. Alerts may be restricted on## events by using a filter as in the second example below.## set alert didmehh@163.com # receive all alerts## Do not alert when Monit start,stop or perform a user initiated action# set alert manager@foo.bar not on &#123; instance, action &#125;#### Monit has an embedded web server which can be used to view status of## services monitored and manage services from a web interface. See the## Monit Wiki if you want to enable SSL for the web server.# 监控情况在网页上可视 set httpd port 2812 and# use address localhost # only accept connection from localhost# allow localhost # allow localhost to connect to the server and# allow admin:monit # require user 'admin' with password 'monit' allow admin:monit # allow users of group 'monit' to connect (rw)# allow @users readonly # allow users of group 'users' to connect readonly## monit postgresqlcheck process web_postgresql with pidfile /var/run/postgresql/9.3-main.pid start program = "/etc/init.d/postgresql start" with timeout 60 seconds stop program = "/etc/init.d/postgresql stop"# monit nginxcheck process web_nginx with pidfile /run/nginx.pid start program = "/etc/init.d/nginx start" with timeout 60 seconds stop program = "/etc/init.d/nginx stop"# monit redischeck process web_redis with pidfile /var/run/redis_server.pid start program = "/etc/init.d/redis_server start" with timeout 60 seconds stop program = "/etc/init.d/redis_server stop"# monit pumacheck process web_puma with pidfile /home/user/www/app/shared/tmp/pids/puma.pid# monit sidekiqcheck process web_sidekiq with pidfile /home/user/www/app/shared/tmp/pids/sidekiq.pid# 监控硬盘check filesystem datafs with path /dev/xvda1 start program = "/bin/mount /data" stop program = "/bin/umount /data" if failed permission 660 then unmonitor if failed uid root then unmonitor if failed gid disk then unmonitor if space usage &gt; 80% for 5 times within 15 cycles then alert if space usage &gt; 99% then stop if inode usage &gt; 30000 then alert if inode usage &gt; 99% then stop group server# 监控home空间#check device home with path /home/pinee# if SPACE usage &gt; 0% then alert################################################################################# Services################################################################################### Check general system resources such as load average, cpu and memory## usage. Each test specifies a resource, conditions and the action to be## performed should a test fail.## check system myhost.mydomain.tld# if loadavg (1min) &gt; 4 then alert# if loadavg (5min) &gt; 2 then alert# if memory usage &gt; 75% then alert# if swap usage &gt; 25% then alert# if cpu usage (user) &gt; 70% then alert# if cpu usage (system) &gt; 30% then alert# if cpu usage (wait) &gt; 20% then alert## ## Check if a file exists, checksum, permissions, uid and gid. In addition## to alert recipients in the global section, customized alert can be sent to## additional recipients by specifying a local alert handler. The service may## be grouped using the GROUP option. More than one group can be specified by## repeating the 'group name' statement.# # check file apache_bin with path /usr/local/apache/bin/httpd# if failed checksum and# expect the sum 8f7f419955cefa0b33a2ba316cba3659 then unmonitor# if failed permission 755 then unmonitor# if failed uid root then unmonitor# if failed gid root then unmonitor# alert security@foo.bar on &#123;# checksum, permission, uid, gid, unmonitor# &#125; with the mail-format &#123; subject: Alarm! &#125;# group server## ## Check that a process is running, in this case Apache, and that it respond## to HTTP and HTTPS requests. Check its resource usage such as cpu and memory,## and number of children. If the process is not running, Monit will restart## it by default. In case the service is restarted very often and the## problem remains, it is possible to disable monitoring using the TIMEOUT## statement. This service depends on another service (apache_bin) which## is defined above.# # check process apache with pidfile /usr/local/apache/logs/httpd.pid# start program = "/etc/init.d/httpd start" with timeout 60 seconds# stop program = "/etc/init.d/httpd stop"# if cpu &gt; 60% for 2 cycles then alert# if cpu &gt; 80% for 5 cycles then restart# if totalmem &gt; 200.0 MB for 5 cycles then restart# if children &gt; 250 then restart# if loadavg(5min) greater than 10 for 8 cycles then stop# if failed host www.tildeslash.com port 80 protocol http# and request "/somefile.html"# then restart# if failed port 443 type tcpssl protocol http# with timeout 15 seconds# then restart# if 3 restarts within 5 cycles then timeout# depends on apache_bin# group server# # ## Check filesystem permissions, uid, gid, space and inode usage. Other services,## such as databases, may depend on this resource and an automatically graceful## stop may be cascaded to them before the filesystem will become full and data## lost.## check filesystem datafs with path /dev/sdb1# start program = "/bin/mount /data"# stop program = "/bin/umount /data"# if failed permission 660 then unmonitor# if failed uid root then unmonitor# if failed gid disk then unmonitor# if space usage &gt; 80% for 5 times within 15 cycles then alert# if space usage &gt; 99% then stop# if inode usage &gt; 30000 then alert# if inode usage &gt; 99% then stop# group server#### Check a file's timestamp. In this example, we test if a file is older## than 15 minutes and assume something is wrong if its not updated. Also,## if the file size exceed a given limit, execute a script## check file database with path /data/mydatabase.db# if failed permission 700 then alert# if failed uid data then alert# if failed gid data then alert# if timestamp &gt; 15 minutes then alert# if size &gt; 100 MB then exec "/my/cleanup/script" as uid dba and gid dba#### Check directory permission, uid and gid. An event is triggered if the## directory does not belong to the user with uid 0 and gid 0. In addition,## the permissions have to match the octal description of 755 (see chmod(1)).### Check a remote host availability by issuing a ping test and check the## content of a response from a web server. Up to three pings are sent and## connection to a port and an application level network check is performed.## check host myserver with address 192.168.1.1# if failed icmp type echo count 3 with timeout 3 seconds then alert# if failed port 3306 protocol mysql with timeout 15 seconds then alert# if failed url http://user:password@www.foo.bar:8080/?querystring# and content == 'action="j_security_check"'# then alert################################################################################### Includes################################################################################### It is possible to include additional configuration parts from other files or## directories.# include /etc/monit/conf.d/*# 上面这些是基本的配置．然后我们得重新加载monit 1sudo service monit reload - 然后重启一下 1sudo service monit restart]]></content>
      <tags>
        <tag>rails</tag>
        <tag>运维</tag>
        <tag>monit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ruby面试整理]]></title>
    <url>%2F2017%2F08%2F04%2FRuby%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[简介昨天去面试了一家公司，做了一天的车，基本上是蒙蔽状态。今天有时间重新思考了一下。2017-02-09 题1: 题1（用each实现map） 解： 1234def each_for_map a = [] self.each&#123;|i| a &lt;&lt; yield(i)&#125;end 简介这两天去面试，碰到了一下算法题，特此来与大家分享。 题2: 题1（请写个方法实现如下内容：） validate_string?(&quot;{}(text)&quot;) =&gt; true validate_string?(&quot;{()}&quot;) =&gt; false validate_string?(&quot;{()[]}&quot;) =&gt; true 解： 12345678910def validate_string?(str) brackets = [] validate_hash = &#123;"&#123;" =&gt; "&#125;", "(" =&gt; ")", "[" =&gt; "]"&#125; str.each_char do |char| brackets &lt;&lt; char if validate_hash.key?(char) #如果存在这个key,那就追加到括号数组里。 return false if validate_hash.key(char) &amp;&amp; validate_hash.key(char) != brackets.pop #如果字符串char在validate_hash中有key值并且key值不是等于数组的最后一个，那么就返回false end brackets.empty?end 1puts validate_string?("()&#123;xiaozhu&#125;") #=&gt; true 题3： 题2 1到n的数字中，缺少一个数，随机排序在数组中，请找出这个随机的数字。 解 12345def missing_number(array) max = array.max min = array.min (min .. max).to_a - arrayend 123a = (1 .. 1000).to_aa.delete((1 .. 1000).to_a.sample)puts missing_number(a)]]></content>
      <tags>
        <tag>Interview</tag>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build Hexo]]></title>
    <url>%2F2017%2F08%2F04%2Fbuild-hexo%2F</url>
    <content type="text"><![CDATA[动手搭建基于Hexo的Blog基本操作依赖 node的依赖. 安装hexo123mkdir &lt;github-name&gt;.github.io -pcd &lt;github-name&gt;.github.iosudo npm install -g hexo-cli 初始化博客框架12hexo initnpm install 初次展现经过上面简单的步骤,已经把基本的博客框架给搭建好了.可以查看下效果. 1hexo s 然后输入 localhost:4000可以查看下基本的效果.不过,这不是我想要的. 美化操作主题选择下载主题到themes 1git clone https://github.com/iissnan/hexo-theme-next themes/next 这样就把主题搞定了.不过要配置下.在&lt;github-name.github.io&gt;的_config.yml中找到theme.1theme: next #注意, 默认是landscape 这里可配置文件选项较多,请查看文档 更多配置提交到git123git push origin masterhexo ghexo d 注意事项git push到github page之后出现404.邮件反馈: First123456789The page build completed successfully, but returned the following warning for the `master` branch:You are attempting to use a Jekyll theme, "next", which is not supported by GitHub Pages. Please visit https://pages.github.com/themes/ for a list of supported themes. If you are using the "theme" configuration variable for something other than a Jekyll theme, we recommend you rename this variable throughout your site. For more information, see https://help.github.com/articles/adding-a-jekyll-theme-to-your-github-pages-site/.For information on troubleshooting Jekyll see: https://help.github.com/articles/troubleshooting-jekyll-buildsIf you have any questions you can contact us by replying to this email. 这个是要指定下, 可以参考. Second 123456789The page build failed for the `master` branch with the following error:The tag `fancybox` on line 77 in `themes/landscape/README.md` is not a recognized Liquid tag. For more information, see https://help.github.com/articles/page-build-failed-unknown-tag-error/.For information on troubleshooting Jekyll see: https://help.github.com/articles/troubleshooting-jekyll-buildsIf you have any questions you can contact us by replying to this email. 这个也比较好解决的.去themes下的landscape删除README.md文件.]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>