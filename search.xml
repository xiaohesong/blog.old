<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[闲着无聊,我们来一起科学上网]]></title>
    <url>%2F2017%2F08%2F09%2F%E9%97%B2%E7%9D%80%E6%97%A0%E8%81%8A-%E6%88%91%E4%BB%AC%E6%9D%A5%E4%B8%80%E8%B5%B7%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%2F</url>
    <content type="text"><![CDATA[首先去买个大陆以外的服务器.搬瓦工找个,得用中国机房的购买成功之后,会邮件通知.然后登录进去,安装影梭.1231. sudo apt-get update2. sudo apt-get install python-pip3. sudo pip install shadowsocks 不出意外,会安装成功了这里.然后添加一个配置文件sudo vim shadowsocks-conf.json:123456789&#123; "server":"0.0.0.0", "server_port":8888, "local_address":"127.0.0.1", "local_port":1080, "password":"这里是你的链接ss的密码", "timeout":600, "method":"aes-256-cfb"&#125; 上面就是对应的配置文件,服务端配置好之后,启动shadowsocks:1sudo ssserver -c shadowsocks-conf.json -d start 然后就是客户端了.这里主要说的是iphone.注: Android可以下载到shadowsocks.但是ipone不是很好.所以在App Store里下载了一个wingy就可以了. 番外:有人说最近爬墙打压的厉害.还是不知道咋回事,网速不理想.准备加速试试效果. ss加速 推荐tcp bbr 首先更新内核 开启bbr 123modprobe tcp_bbrsudo echo "tcp_bbr" &gt;&gt; /etc/modules-load.d/modules.conf# 我的/etc 下面没有modules-load.d. 所以直接 vim /etc/modules,然后添加 tcp_bbr. 12sudo echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.confsudo echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf 1sudo sysctl -p]]></content>
      <categories>
        <category>科学上网</category>
      </categories>
      <tags>
        <tag>科学上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails中的sql小记]]></title>
    <url>%2F2017%2F08%2F07%2FRails%E4%B8%AD%E7%9A%84sql%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Rails中的Sql小记关于joinsql中的join left join 12select count(distinct store_name) from scores left join stores on scores.scoreable_id = stores.id and scores.scoreable_type = 'Store' where store.status = 0 and scores.user_type=0;# 这个是查询 所有带有评分的门店,并且门店是营业状态(0)和评分的类型是用户评分(0) right join和left join差不多.不过这个是以右表全表为基础进行处理. inner join 1SELECT `companies`.* FROM `companies` INNER JOIN `departments` ON `departments`.`company_id` = `companies`.`id` rails中的join joins12Company.joins(:departments).to_sql# =&gt; SELECT `companies`.* FROM `companies` INNER JOIN `departments` ON `departments`.`company_id` = `companies`.`id` 可以发现,rails中的joins对应sql中的inner join. includes 12Company.includes(:departments).where(departments: &#123;department_name: '#'&#125;).first# =&gt; SELECT DISTINCT `companies`.`id`, `companies`.`id` AS alias_0 FROM `companies` LEFT OUTER JOIN `departments` ON `departments`.`company_id` = `companies`.`id` WHERE `departments`.`department_name` = '#' ORDER BY `companies`.`id` ASC LIMIT 1 可以发现,有一个LEFT OUTER JOIN.是不是和left join很像. 小结对应的关系 join就是inner join, inner是可选的. left outer join就是left join, outer是可选的. 具体的可查看此链接 其他方法 sum 1SUM(CASE WHEN num &gt; 0 THEN 1 else 0 END) AS available_times round 12ROUND('123.654',2)# 123.654 取小数后两位 GROUP_CONCAT/CONCAT返回拼接的字符串. GROUP_CONCAT与group by配合使用,效果更佳. 原文链接]]></content>
      <tags>
        <tag>rails</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用monit监控rails应用]]></title>
    <url>%2F2017%2F08%2F04%2F%E4%BD%BF%E7%94%A8monit%E7%9B%91%E6%8E%A7rails%E5%BA%94%E7%94%A8%2F</url>
    <content type="text"><![CDATA[monit的安装，ubuntu可以直接安装 1sudo apt-get install monit 这样就安装好了．然后我们看下配置文件,在 /etc/monit/monitrc : 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279################################################################################# Monit control file################################################################################### Comments begin with a '#' and extend through the end of the line. Keywords## are case insensitive. All path's MUST BE FULLY QUALIFIED, starting with '/'.#### Below you will find examples of some frequently used statements. For## information about the control file and a complete list of statements and## options, please have a look in the Monit manual.##################################################################################### Global section################################################################################### Start Monit in the background (run as a daemon):# set daemon 30 # check services at 2-minute intervals, current is 30 second# with start delay 240 # optional: delay the first check by 4-minutes (by# # default Monit check immediately after Monit start)#### Set syslog logging with the 'daemon' facility. If the FACILITY option is## omitted, Monit will use 'user' facility by default. If you want to log to## a standalone log file instead, specify the full path to the log file## set logfile syslog facility log_daemon set logfile /var/log/monit.log # 下面的是163的邮箱服务器,请注意端口是ssl或者非ssl情况. # set mailserver smtp.163.com username "name@163.com" password "pwd" using sslv3 # 下面的这个是万网的邮箱服务器 set mailserver smtp.mxhichina.com username "name@domain.com" password "pwd" using sslv3 with timeout 30 seconds # 这个是邮件接收者 set alert receive@mail.com # 这个是邮件格式，可以自己定义. set mail-format &#123; from: name@domain.com subject: monit alert -- $EVENT $SERVICE message: $EVENT Service $SERVICE Date: $DATE Action: $ACTION Host: $HOST Description: $DESCRIPTION Your faithful employee, Monit &#125;## Set the location of the Monit id file which stores the unique id for the## Monit instance. The id is generated and stored on first Monit start. By## default the file is placed in $HOME/.monit.id.## set idfile /var/.monit.id set idfile /var/lib/monit/id### Set the location of the Monit state file which saves monitoring states## on each cycle. By default the file is placed in $HOME/.monit.state. If## the state file is stored on a persistent filesystem, Monit will recover## the monitoring state across reboots. If it is on temporary filesystem, the## state will be lost on reboot which may be convenient in some situations.# set statefile /var/lib/monit/state### Set the list of mail servers for alert delivery. Multiple servers may be## specified using a comma separator. If the first mail server fails, Monit# will use the second mail server in the list and so on. By default Monit uses# port 25 - it is possible to override this with the PORT option.## By default Monit will drop alert events if no mail servers are available.## If you want to keep the alerts for later delivery retry, you can use the## EVENTQUEUE statement. The base directory where undelivered alerts will be## stored is specified by the BASEDIR option. You can limit the maximal queue## size using the SLOTS option (if omitted, the queue is limited by space## available in the back end filesystem).# set eventqueue basedir /var/lib/monit/events # set the base directory where events will be stored slots 100 # optionally limit the queue size### Monit by default uses the following format for alerts if the the mail-format## statement is missing::## --8&lt;--## --8&lt;--#### You can override this message format or parts of it, such as subject## or sender using the MAIL-FORMAT statement. Macros such as $DATE, etc.## are expanded at runtime. For example, to override the sender, use:## set mail-format &#123; from: monit@foo.bar &#125;# 监控网页应用check system domain.com if loadavg (1min) &gt; 4 then alert if loadavg (5min) &gt; 2 then alert if memory usage &gt; 75% then alert if swap usage &gt; 25% then alert if cpu usage (user) &gt; 70% then alert if cpu usage (system) &gt; 30% then alert if cpu usage (wait) &gt; 20% then alert### You can set alert recipients whom will receive alerts if/when a## service defined in this file has errors. Alerts may be restricted on## events by using a filter as in the second example below.## set alert didmehh@163.com # receive all alerts## Do not alert when Monit start,stop or perform a user initiated action# set alert manager@foo.bar not on &#123; instance, action &#125;#### Monit has an embedded web server which can be used to view status of## services monitored and manage services from a web interface. See the## Monit Wiki if you want to enable SSL for the web server.# 监控情况在网页上可视 set httpd port 2812 and# use address localhost # only accept connection from localhost# allow localhost # allow localhost to connect to the server and# allow admin:monit # require user 'admin' with password 'monit' allow admin:monit # allow users of group 'monit' to connect (rw)# allow @users readonly # allow users of group 'users' to connect readonly## monit postgresqlcheck process web_postgresql with pidfile /var/run/postgresql/9.3-main.pid start program = "/etc/init.d/postgresql start" with timeout 60 seconds stop program = "/etc/init.d/postgresql stop"# monit nginxcheck process web_nginx with pidfile /run/nginx.pid start program = "/etc/init.d/nginx start" with timeout 60 seconds stop program = "/etc/init.d/nginx stop"# monit redischeck process web_redis with pidfile /var/run/redis_server.pid start program = "/etc/init.d/redis_server start" with timeout 60 seconds stop program = "/etc/init.d/redis_server stop"# monit pumacheck process web_puma with pidfile /home/user/www/app/shared/tmp/pids/puma.pid# monit sidekiqcheck process web_sidekiq with pidfile /home/user/www/app/shared/tmp/pids/sidekiq.pid# 监控硬盘check filesystem datafs with path /dev/xvda1 start program = "/bin/mount /data" stop program = "/bin/umount /data" if failed permission 660 then unmonitor if failed uid root then unmonitor if failed gid disk then unmonitor if space usage &gt; 80% for 5 times within 15 cycles then alert if space usage &gt; 99% then stop if inode usage &gt; 30000 then alert if inode usage &gt; 99% then stop group server# 监控home空间#check device home with path /home/pinee# if SPACE usage &gt; 0% then alert################################################################################# Services################################################################################### Check general system resources such as load average, cpu and memory## usage. Each test specifies a resource, conditions and the action to be## performed should a test fail.## check system myhost.mydomain.tld# if loadavg (1min) &gt; 4 then alert# if loadavg (5min) &gt; 2 then alert# if memory usage &gt; 75% then alert# if swap usage &gt; 25% then alert# if cpu usage (user) &gt; 70% then alert# if cpu usage (system) &gt; 30% then alert# if cpu usage (wait) &gt; 20% then alert## ## Check if a file exists, checksum, permissions, uid and gid. In addition## to alert recipients in the global section, customized alert can be sent to## additional recipients by specifying a local alert handler. The service may## be grouped using the GROUP option. More than one group can be specified by## repeating the 'group name' statement.# # check file apache_bin with path /usr/local/apache/bin/httpd# if failed checksum and# expect the sum 8f7f419955cefa0b33a2ba316cba3659 then unmonitor# if failed permission 755 then unmonitor# if failed uid root then unmonitor# if failed gid root then unmonitor# alert security@foo.bar on &#123;# checksum, permission, uid, gid, unmonitor# &#125; with the mail-format &#123; subject: Alarm! &#125;# group server## ## Check that a process is running, in this case Apache, and that it respond## to HTTP and HTTPS requests. Check its resource usage such as cpu and memory,## and number of children. If the process is not running, Monit will restart## it by default. In case the service is restarted very often and the## problem remains, it is possible to disable monitoring using the TIMEOUT## statement. This service depends on another service (apache_bin) which## is defined above.# # check process apache with pidfile /usr/local/apache/logs/httpd.pid# start program = "/etc/init.d/httpd start" with timeout 60 seconds# stop program = "/etc/init.d/httpd stop"# if cpu &gt; 60% for 2 cycles then alert# if cpu &gt; 80% for 5 cycles then restart# if totalmem &gt; 200.0 MB for 5 cycles then restart# if children &gt; 250 then restart# if loadavg(5min) greater than 10 for 8 cycles then stop# if failed host www.tildeslash.com port 80 protocol http# and request "/somefile.html"# then restart# if failed port 443 type tcpssl protocol http# with timeout 15 seconds# then restart# if 3 restarts within 5 cycles then timeout# depends on apache_bin# group server# # ## Check filesystem permissions, uid, gid, space and inode usage. Other services,## such as databases, may depend on this resource and an automatically graceful## stop may be cascaded to them before the filesystem will become full and data## lost.## check filesystem datafs with path /dev/sdb1# start program = "/bin/mount /data"# stop program = "/bin/umount /data"# if failed permission 660 then unmonitor# if failed uid root then unmonitor# if failed gid disk then unmonitor# if space usage &gt; 80% for 5 times within 15 cycles then alert# if space usage &gt; 99% then stop# if inode usage &gt; 30000 then alert# if inode usage &gt; 99% then stop# group server#### Check a file's timestamp. In this example, we test if a file is older## than 15 minutes and assume something is wrong if its not updated. Also,## if the file size exceed a given limit, execute a script## check file database with path /data/mydatabase.db# if failed permission 700 then alert# if failed uid data then alert# if failed gid data then alert# if timestamp &gt; 15 minutes then alert# if size &gt; 100 MB then exec "/my/cleanup/script" as uid dba and gid dba#### Check directory permission, uid and gid. An event is triggered if the## directory does not belong to the user with uid 0 and gid 0. In addition,## the permissions have to match the octal description of 755 (see chmod(1)).### Check a remote host availability by issuing a ping test and check the## content of a response from a web server. Up to three pings are sent and## connection to a port and an application level network check is performed.## check host myserver with address 192.168.1.1# if failed icmp type echo count 3 with timeout 3 seconds then alert# if failed port 3306 protocol mysql with timeout 15 seconds then alert# if failed url http://user:password@www.foo.bar:8080/?querystring# and content == 'action="j_security_check"'# then alert################################################################################### Includes################################################################################### It is possible to include additional configuration parts from other files or## directories.# include /etc/monit/conf.d/*# 上面这些是基本的配置．然后我们得重新加载monit 1sudo service monit reload - 然后重启一下 1sudo service monit restart]]></content>
      <tags>
        <tag>rails</tag>
        <tag>运维</tag>
        <tag>monit</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ruby面试整理]]></title>
    <url>%2F2017%2F08%2F04%2FRuby%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[简介昨天去面试了一家公司，做了一天的车，基本上是蒙蔽状态。今天有时间重新思考了一下。2017-02-09 题1: 题1（用each实现map） 解： 1234def each_for_map a = [] self.each&#123;|i| a &lt;&lt; yield(i)&#125;end 简介这两天去面试，碰到了一下算法题，特此来与大家分享。 题2: 题1（请写个方法实现如下内容：） validate_string?(&quot;{}(text)&quot;) =&gt; true validate_string?(&quot;{()}&quot;) =&gt; false validate_string?(&quot;{()[]}&quot;) =&gt; true 解： 12345678910def validate_string?(str) brackets = [] validate_hash = &#123;"&#123;" =&gt; "&#125;", "(" =&gt; ")", "[" =&gt; "]"&#125; str.each_char do |char| brackets &lt;&lt; char if validate_hash.key?(char) #如果存在这个key,那就追加到括号数组里。 return false if validate_hash.key(char) &amp;&amp; validate_hash.key(char) != brackets.pop #如果字符串char在validate_hash中有key值并且key值不是等于数组的最后一个，那么就返回false end brackets.empty?end 1puts validate_string?("()&#123;xiaozhu&#125;") #=&gt; true 题3： 题2 1到n的数字中，缺少一个数，随机排序在数组中，请找出这个随机的数字。 解 12345def missing_number(array) max = array.max min = array.min (min .. max).to_a - arrayend 123a = (1 .. 1000).to_aa.delete((1 .. 1000).to_a.sample)puts missing_number(a)]]></content>
      <tags>
        <tag>Interview</tag>
        <tag>ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Build Hexo]]></title>
    <url>%2F2017%2F08%2F04%2Fbuild-hexo%2F</url>
    <content type="text"><![CDATA[动手搭建基于Hexo的Blog基本操作依赖 node的依赖. 安装hexo123mkdir &lt;github-name&gt;.github.io -pcd &lt;github-name&gt;.github.iosudo npm install -g hexo-cli 初始化博客框架12hexo initnpm install 初次展现经过上面简单的步骤,已经把基本的博客框架给搭建好了.可以查看下效果. 1hexo s 然后输入 localhost:4000可以查看下基本的效果.不过,这不是我想要的. 美化操作主题选择下载主题到themes 1git clone https://github.com/iissnan/hexo-theme-next themes/next 这样就把主题搞定了.不过要配置下.在&lt;github-name.github.io&gt;的_config.yml中找到theme.1theme: next #注意, 默认是landscape 这里可配置文件选项较多,请查看文档 更多配置提交到git123git push origin masterhexo ghexo d 注意事项git push到github page之后出现404.邮件反馈: First123456789The page build completed successfully, but returned the following warning for the `master` branch:You are attempting to use a Jekyll theme, "next", which is not supported by GitHub Pages. Please visit https://pages.github.com/themes/ for a list of supported themes. If you are using the "theme" configuration variable for something other than a Jekyll theme, we recommend you rename this variable throughout your site. For more information, see https://help.github.com/articles/adding-a-jekyll-theme-to-your-github-pages-site/.For information on troubleshooting Jekyll see: https://help.github.com/articles/troubleshooting-jekyll-buildsIf you have any questions you can contact us by replying to this email. 这个是要指定下, 可以参考. Second 123456789The page build failed for the `master` branch with the following error:The tag `fancybox` on line 77 in `themes/landscape/README.md` is not a recognized Liquid tag. For more information, see https://help.github.com/articles/page-build-failed-unknown-tag-error/.For information on troubleshooting Jekyll see: https://help.github.com/articles/troubleshooting-jekyll-buildsIf you have any questions you can contact us by replying to this email. 这个也比较好解决的.去themes下的landscape删除README.md文件.]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails5.1使用jquery]]></title>
    <url>%2F2017%2F06%2F12%2FRails5-1%E4%BD%BF%E7%94%A8jquery%2F</url>
    <content type="text"><![CDATA[rails5.1的变化还真是大,对于js的拥抱很友好.Rails5.1变化 前端的管理工具,类似bundler. 1rake yarn:install ps : 安装nodeps : 安装yarn 利用yarn添加juqery 1yarn add jquery application.js如下123//= require jquery//= require jquery_ujs... blog原文]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rails4 actioncable]]></title>
    <url>%2F2017%2F05%2F26%2Frails4-actioncable%2F</url>
    <content type="text"><![CDATA[15年的时候,出了rails5,有个新特性actioncable.刚好公司有个关于推送的需求,但是Rails的版本是Rails4.想使用actioncable. 找了很久找到了一个可以使用的官方的gem. 16年的时候在公司项目中用了进去.现在打算把这个写出来,因为好像很多人都不知道rails4有这个gem可以使用. actioncable在gemfile添加1gem 'actioncable', github: 'rails/actioncable', branch: 'archive' ps: 为了防止作者把分支删除,可以先备份一个到自己的仓库里. bundle之后需要配置一番,这个可不像rails5那么棒,不用配置都行.application.js123...//= require cable... 在app 文件夹下创建相关的目录channels/application_cable/channel.rb1234module ApplicationCable class Channel &lt; ActionCable::Channel::Base endend channels/application_cable/connection.rb123456789101112131415161718192021222324module ApplicationCable class Connection &lt; ActionCable::Connection::Base identified_by :push_store def connect self.push_store = find_verified_user.store end protected def find_verified_user session_key = Rails.application.config.session_options[:key] user_id = cookies.encrypted[session_key]['user_id'] if verified_user = User.find_by(id: user_id) verified_user else reject_unauthorized_connection end end endend# note: 因为websocket不支持session传输，所以此处需要由cookies解密 channels/orders_channel.rb12345678910class OrdersChannel &lt; ApplicationCable::Channel def subscribed stream_from "order_channel_#&#123;push_store.id&#125;" end def unsubscribed # Any cleanup needed when channel is unsubscribed endend# subscribed是连接过来发生的行为，unsubscribed是断开连接发生的行为。 我们在上面将最基本的桥梁搭建好了，那么我得去创建一个消费者去使用他。 在 app/javascripts/下创建一个 app.es6123456789let App = &#123;&#125;;App.cable = Cable.createConsumer(`/cable`);App.messaging = App.cable.subscriptions.create('OrdersChannel', &#123; received: function(data) &#123; $(this).trigger('received', data); &#125;&#125;); 消费者创建好之后，我们需要播报一条消息，让他去监听行为并做出处理 在 app/jobs下创建 order_broadcast_job.rb1234567class OrderBroadcastJob &lt; ActiveJob::Base queue_as :default def perform(store) ActionCable.server.broadcast "order_channel_#&#123;store.id&#125;", &#123; message: "message", user: "current_user" &#125; endend 可以发现，这个任务就是去向order_channel播报一条通知，可以理解为：‘我发布了一个广播，指定进入到order_channel. 连接上来，自然而然的触发了subscribed。广播指定的通道，会去匹配stream_from. 上面我们发布了一个广告有任务了，那么消费者就会积极相应，主动接收任务。 接收了任务之后，就会发生对应的行为。app/javascripts/order.es612345678910111213141516$(function($) &#123; $(App.messaging).on('received', function(event, data) &#123; let count = 0 const message = () =&gt; &#123; count++; if(count%2==1)&#123; document.title='【你有新的消息】' &#125;else &#123; document.title='【 】' &#125; &#125; setInterval(message, 800) &#125;);&#125;); 新建cable文件夹，与app文件夹同级 cable/config.ru123456require ::File.expand_path('../../config/environment', __FILE__)Rails.application.eager_load!require 'action_cable/process/logging'run ActionCable.server 在bin文件夹下创建cable脚本12#!/bin/bashbundle exec puma -p 28080 cable/config.ru 本地使用的时候,直接 $bin/cable就好. 关于部署可以参考我的笔记.actioncable发布 原文]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>rails</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker+rails+postgresql+redis+puma+nginx]]></title>
    <url>%2F2017%2F03%2F31%2Fdocker-rails-postgresql-redis-puma-nginx%2F</url>
    <content type="text"><![CDATA[看了两天的docker相关文章，就尝试把一个现有的小blog换成docker部署尝试一番．前期有个疑问，capistrano一类的工具也可以很方便的部署，为什么还要docker．有人说保持环境一致，这个不多做评价，不过个人感觉，rails分为三个环境，各有优势，为何要保持一致．在我看来，capistrano和docker的主要区别，还是一个适合多机部署，一个适合单机部署．也有一些人说docker更适合微架构，不过我觉得多机部署也没有什么区别把，单点故障之类的都可以．有些扯远了，还是言归正传吧． 我们首先得安装docker及相应的工具． 安装docker 1curl -sSL https://get.daocloud.io/docker | sh 这里可以把docker添加到组里,安装成功之后会有这么一句话． sudo usermod -aG docker name 安装docker-compose curl -L https://github.com/docker/compose/releases/download/1.7.1/docker-compose-Linux-x86_64 &gt; \ /tmp/docker-compose &amp;&amp; \ chmod +x /tmp/docker-compose &amp;&amp; sudo mv /tmp/docker-compose /usr/local/bin 然后我们验证是否安装成功． docker --version docker-compose --version 这里主要是针对现存的项目进行处理．假设项目名称是 psp.我们在项目主目录下新建一个文件Dockerfile1234567891011121314151617181920212223242526272829303132333435FROM ruby:2.3.1 ＃基本镜像#author infoMAINTAINER Xiaozhu didmehh@163.com#基本的依赖RUN apt-get update &amp;&amp; apt-get install -y build-essential libpq-dev nodejs＃设置环境变量ENV RAILS_ENV productionENV RACK_ENV production上面两个是指定应用环境ENV RAILS_ROOT /home/issue/www/psp＃创建工作目录RUN mkdir -p $RAILS_ROOT＃指定工作目录WORKDIR $RAILS_ROOT#处理gemCOPY Gemfile GemfileCOPY Gemfile.lock Gemfile.lockRUN gem install bundlerRUN bundle install# 复制puma的配置COPY config/puma.rb config/puma.rb# 复制主目录COPY . .＃ 暴露3000EXPOSE 3000＃运行shell脚本CMD bash start_up.sh 上面的是Dockerfile的基本配置．发现上面有出现 config/puma.rb 以及 start_up.sh.config/puma.rb在rails5里会自动创建，可以自己找．start_up.sh 内容如下：123456#!/bin/bash# 处理静态资源bundle exec rake assets:precompile#启动pumabundle exec puma -C config/puma.rb 这个是基本的配置，针对rails服务．下面来看看nginx的处理． 在主目录下创建 Dockerfile-nginx1234567891011121314151617181920FROM nginxRUN apt-get update -qq &amp;&amp; apt-get -y install apache2-utilsENV RAILS_ROOT /home/issue/www/pspWORKDIR $RAILS_ROOTRUN mkdir logCOPY public public/COPY config/nginx.conf /tmp/docker_example.nginxRUN envsubst '$RAILS_ROOT' &lt; /tmp/docker_example.nginx &gt; /etc/nginx/conf.d/default.conf# RUN rm -rf /etc/nginx/sites-available/default# ADD config/nginx.conf /etc/nginx/sites-enabled/nginx.confEXPOSE 80CMD [ "nginx", "-g", "daemon off;" ] 到这里，我们把基本的Dockerfile给创建了．接下来我们需要在项目里写个nginx配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#config/nginx.confupstream puma &#123; server app:3000;&#125;server &#123; listen 80; client_max_body_size 4G; keepalive_timeout 10; error_page 500 502 504 /500.html; error_page 503 @503; server_name xiaohesong.com; root /home/issue/www/psp/public; try_files $uri/index.html $uri @puma; access_log /home/issue/www/psp/log/nginx.access.log; error_log /home/issue/www/psp/log/nginx.error.log; location @puma &#123; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect off; proxy_pass http://puma; # limit_req zone=one; &#125; location ^~ /assets/ &#123; gzip_static on; expires max; add_header Cache-Control public; &#125; location = /50x.html &#123; root html; &#125; location = /404.html &#123; root html; &#125; location @503 &#123; error_page 405 = /system/maintenance.html; if (-f $document_root/system/maintenance.html) &#123; rewrite ^(.*)$ /system/maintenance.html break; &#125; rewrite ^(.*)$ /503.html break; &#125; if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ )&#123; return 405; &#125; if (-f $document_root/system/maintenance.html) &#123; return 503; &#125; location ~ \.(php|html)$ &#123; return 405; &#125;&#125; ####上面配置完了nginx以及主应用，那么我们得把他们关联起来．我们需要docker-compose在主目录下创建docker-compose.yml 12345678910111213141516171819202122232425262728293031323334version: '2'services: app: build: . command: bundle exec puma -C config/puma.rb volumes: - .:/home/issue/www/psp expose: - "3000" links: - postgres - redis env_file: - .secret.env web: build: context: . dockerfile: Dockerfile-nginx links: - app ports: - "80:80" postgres: image: postgres:9.4 ports: - "5432" volumes: - ~/main-database:/var/lib/postgresql/data redis: image: redis:3.0.5 ports: - '6379:6379' volumes: - ~/cache-database:/var/lib/redis/data 可以发现在redis以及postgres加上了volumes.这个是可以设置共享数据，挂在数据卷，便于持久化存储数据． redis以及postgres都是直接从远程仓库拷贝下来的镜像．hub docker volumes前面的宿主机可以通过 docker volume create --name cache-database 来创建,如果不创建，会默认生成．可以通过 docker volume ls 查看.设置的别名如果过多，一个个的创建很麻烦，你也可以这样处理． 123456789version: '2'services: app: ... ... ...volumes: cache-database: main-database: links是把需要的服务拿过来使用．例如app作为主服务，需要持久化存储的数据库． 配置数据库的用户密码． 123456postgres: image: postgres:9.4 ... environment: POSTGRES_USER: pg_user POSTGRES_PASSWORD: secret password app的配置里，我们有个env_file,这个可以在主目录下创建一个.env的文件．可以用来存放一些环境变量，或者可以直接shell脚本直接写文件到电脑系统配置里我们这里存放的主要是secret： 1SECRET_KEY_BASE=ecd694a53572357f98c4644991ef5d6e27d46a1dc18d605b7e58c7143ff0122c868b63f771788c82fe825fd6945dfa0f322ec73dddcf19d1e6c85234a66eae44 SECRET_KEY_BASE可以通过 RAILS_ENV=production bundle exec rake secret 生成. 接下来配置数据库．1234567891011121314151617181920212223242526#config/database.ymldefault: &amp;default adapter: postgresql encoding: unicode pool: 5 timeout: 5000 username: postgres # please see the update below about using hostnames to # access linked services via docker-compose host: postgres #是 docker-compose.yml中的key,与app,web同列，redis同样 port: 5432 password: #&lt;%= ENV['POSTGRES_PASSWORD'] %&gt;development: &lt;&lt;: *default database: psp_devtest: &lt;&lt;: *default database: psp_testproduction: &lt;&lt;: *default database: psp_pro 12345678910111213141516# config/redis.ymldefaults: &amp;defaults host: redis port: 6379development: &lt;&lt;: *defaultstest: &lt;&lt;: *defaultsstaging: &lt;&lt;: *defaultsproduction: &lt;&lt;: *defaults 接下来，我们构建这些个服务． 1docker-compose build 这里可能需要一些时间，构建好之后，我们先启动测试一下，可以不要以守护状态运行，直接:1docker-compose up 不出意外．可以发现启动成功．我们看下启动了哪些容器．打开一个标签页，运行以下命令查看: 1docker ps 会有以下的输出：12345CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESf716c3ee2414 psp_web "nginx -g 'daemon ..." About an hour ago Up About an hour 0.0.0.0:80-&gt;80/tcp, 443/tcp psp_web_157702197c38c psp_app "bundle exec puma ..." About an hour ago Up About an hour 3000/tcp psp_app_1415edf596c26 redis:3.0.5 "/entrypoint.sh re..." About an hour ago Up About an hour 0.0.0.0:6379-&gt;6379/tcp psp_redis_1cecf281102b3 postgres:9.4 "docker-entrypoint..." About an hour ago Up About an hour 0.0.0.0:32770-&gt;5432/tcp psp_postgres_1 启动了也存在问题呀，数据库没有，那我们就创建一个数据库．12docker-compose run app rake db:createdocker-compose run app rake db:migrate 如果想删除所有的容器，可以运行下面这个命令:1docker rm `docker ps --no-trunc -aq` Ps: 源码###参考 shell脚本推荐鸟哥linux私房菜 docker基本知识参考随风的系列博客 RAILS 5 AND DOCKER (PUMA, NGINX) connect database ###外传，遇到的问题: 问题一：无法build容器.执行docker-compose build 无法正常构建．折腾了很久，换源也不行，在google找到了一个类似的 .把代理关了就好．．．． 问题二：nginx只有 welcome to nginx没有正常启动项目，就是没有和项目绑定在一起．找了很久，最后经过各种排查以及尝试．把nginx的Dockerfile-nginx 修改一下： 1234COPY config/nginx.conf /tmp/docker_example.nginxRUN envsubst '$RAILS_ROOT' &lt; /tmp/docker_example.nginx &gt; /etc/nginx/conf.d/default.conf# RUN rm -rf /etc/nginx/sites-available/default# ADD config/nginx.conf /etc/nginx/sites-enabled/nginx.conf 可以发现下面的两行被注释了，以前习惯的把配置文件放在/etc/nginx/sites-enabled/nginx.conf 下面．这次就不行了．这是为什么？进入nginx容器看下.先找到nginx的容器id, 通过docker ps 查看当前运行的容器．假设输出如下：12CONTAINER ID | IMAGE | COMMAND | ... f716c3ee2414 | ... | ... | ... 然后我们进入这个容器: docker exec -it f716c3ee2414 bash进入容器之后 cat /etc/nginx/nginx.conf | grep include 会发现输出一下内容：include /etc/nginx/mime.types; include /etc/nginx/conf.d/*.conf;这个 include /etc/nginx/conf.d/*.conf; 是包含配置文件的路劲．都在这个下面，然而我们改的是在/etc/nginx/sites-enabled/* 下面．所以说，配置文件没有生效，使用的默认的default配置． 问题三: 启动时出错，docker-compose up 出错．出错是:123456ERROR: for redis driver failed programming external connectivity on endpoint psp_redis_1 (13693b22524bf940932c25f9b7f5dac45671f68fbc04fad1a76ed08274db5699): Error starting userland proxy: listen tcp 0.0.0.0:6379: bind: address already in useTraceback (most recent call last): File "&lt;string&gt;", line 3, in &lt;module&gt; File "compose/cli/main.py", line 63, in mainAttributeError: 'ProjectError' object has no attribute 'msg'docker-compose returned -1 显示已经存在，很怪异吧．经过排查，是因为本地的redis已经启动．关了本地的redis服务就好．sudo service redis-server stop然后重启，docker-compose up 发现不会redis出错地址绑定关系．又出现一个错误．1ERROR: Named volume "db:/var/lib/postgresql/data:rw" is used in service "db" but no declaration was found in the volumes section. 这个是因为语法错误，如下：1234redis: ... volumes: - cache-redis:/var/lib/redis/data 这样就会出错，换一种写法,如下： 12volumes: - ~/cache-redis:/var/lib/redis/data Note: 目前对docker知之甚少，后期会补充，有不是的地方，恳请留言，谢谢! 后期会继续补充!blog原文]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>部署</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React和Rails]]></title>
    <url>%2F2017%2F03%2F05%2FReact%E5%92%8CRails%2F</url>
    <content type="text"><![CDATA[对于rails中集成react组件有两个比较好的gem可供选择。 1. react_rails这个gem相对简单一点,有一个很好的例子可供参考。 reactjs-a-guide-for-rails-developers 2. react_on_rails这个gem复杂些，对环境要求比较高。 环境要求 nodejs yarn foreman – gem install foreman recet_on_rails example 本人使用react_rails和react_on_rails两个gem实现了同一个例子。react_rails是使用coffee编写。react_on_rails是使用原生的jsx编写。源码 react_rails主文件在 app/assets/javascripts/components 下 react_on_rails主文件夹在client/app/bundles/HelloWorld/components/records下。 该如何选择:简单的使用react_rails.复杂的使用react_on_rails 3. 纯前端的React Deomo 主要是实现了一个简单的TODO功能。 UI是从bootstrsap切换成了Ant-Design. react源码，wiki中有介绍如何接入ant-design.其实官方文档里已经说明了如何使用。 Ant-Design官网 react jsx语法规范Note 每次在组件中调用方法，在执行该方法时会报错找不到this(null),这个时候需要去手动绑定，在构造函数的函数里。 1234567891011constructor(props) &#123; super(props); this.state = &#123; name: 'xiaozhu' &#125; this.example = this.example.bind(this); &#125; example() &#123; // do somthing&#125; 这样很麻烦吧，可以换成es6的写法： 1234567891011constructor(props) &#123; super(props); this.state = &#123; name: 'xiaozhu' &#125; //this.example = this.example.bind(this); &#125; example = (param) =&gt; &#123; // do somthing &#125; 这样写，就不需要自己去手动绑定了。参考具体的不是es6的效果请查阅２． 组件之间进行通信，需要在对应的组件上添加属性。 // OneComponent render(){ return( &lt;ExampleComponent handleOperation={this.doSomthing}&gt; ) } doSomthing = (param) =&gt; { // do somthing } // ExampleComponent render(){ return( &lt;h1&gt;Hi,Xiaozhu&lt;/h1&gt; &lt;a className=&apos;btn btn-default&apos; onClick={this.handleToUpdate}&gt; Update &lt;/a&gt; ) } handleToUpdate = （e） =&gt; { var _this = this e.preventDefault(); $.ajax({ ... success: function(data){ _this.props.handleOperation (data) } }) }]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>rails</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云ECS服务器安装postgresql无法启动的问题]]></title>
    <url>%2F2016%2F12%2F14%2F%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85postgresql%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[安装很简单： 1sudo apt-get install postgresql #安装这个库 1sudo su postgres -c psql postgresql #这里是进入数据库下 然后报错进不去。locale 语言的设置问题。如下: 12345678910perl: warning: Setting locale failed.perl: warning: Please check that your locale settings:LANGUAGE = "unset",LC_ALL = "unset",LC_CTYPE = "UTF-8",LANG = "en_US.UTF-8"are supported and installed on your system.perl: warning: Falling back to the standard locale ("C")....... 这里经过排查，可以知道是因为系统语言的问题。解决方式： 12sudo locale-gen en_US en_US.UTF-8sudo dpkg-reconfigure locales 然后执行第二部尝试是否成功，如果不成功，会发现对应的LC_ALL以及LC_LANGUAGE还是空的（unset）,可以这样解决：123export LANGUAGE="en_US.UTF-8"echo 'LANGUAGE="en_US.UTF-8"' &gt;&gt; /etc/default/localeecho 'LC_ALL="en_US.UTF-8"' &gt;&gt; /etc/default/locale 设置好之后，重新登陆服务器。再次尝试执行 su postgres -c psql postgresql ``` 尝试登入数据库。123456希望你能成功。很可惜，我这里是失败了。报错：```shellpsql: could not connect to server: No such file or directoryIs the server running locally and accepting connections on Unix domain socket&quot;/var/pgsql_socket/.s.PGSQL.5432&quot;? 然后尝试重启postgresql服务1sudo service postgresql restart 会有一个报错：1No PostgreSQL clusters exist; see “man pg_createcluster” 解决方式这般：1sudo pg_createcluster 9.3 main --start 然后进入数据库尝试。是可以进入的。进入之后，我们要改变数据库的密码 123ALTER USER postgres WITH PASSWORD 'xiaozhu'; #修改你的密码\qsudo passwd postgres #修改postgres用户的密码 这些是我在服务器上第一次碰到这样的问题，希望能对你有所帮助。blog原文]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>pg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rails Middleware]]></title>
    <url>%2F2016%2F11%2F16%2FRails-Middleware%2F</url>
    <content type="text"><![CDATA[Rails Middleware app/middleware/dalta_logger.rb 1234567891011121314151617181920#app/middleware/dalta_logger.rbclass DeltaLogger def initialize(app, formatting_char = '=', log_level = "info") @app = app @formatting_char = formatting_char @log_level = log_level end def call env request_started_on = Time.now @status, @headers, @response = @app.call(env) request_ended_on = Time.now Rails.logger.send(@log_level, @formatting_char * 50) Rails.logger.send(@log_level, "Request delta time: #&#123;request_ended_on - request_started_on&#125; seconds.") Rails.logger.send(@log_level, @formatting_char * 50) [@status, @headers, @response] endend config/application.rb 1config.middleware.use "DeltaLogger", "*", :warn restart server原文blog原文]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>rails</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用sinatra实现简单的crud功能]]></title>
    <url>%2F2016%2F11%2F16%2F%E4%BD%BF%E7%94%A8sinatra%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84crud%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[Sinatra1gem install sinatra hello_sinatra 12mkdir -p hello_sinatracd hello_sinatra vim hello_sinatra.rb1234require "sinatra"get "/" do "Hello, world!"end 然后 ruby hello_sinatra.rblocalhost:4567 修改hello_sinatra.rb1234require "sinatra"get "/post/:id" do "Hello, world!参数是#&#123;params&#125;"end 然后刷新页面，会发现，有报错，不生效。 Note that every time we change the Ruby file, we’ll need to restart the server 这样每次修改一下，不是很讨厌吗？？shotgun可以避免这个问题。1gem install shotgun 然后启动的时候注意一下。1ruby hello_sinatra.rb -&gt; shotgun hello_sinatra.rb 这个时候的端口，由4567改变成了9393Creating a Basic Web App With Ruby and Sinatra build sinatra app 12mkdir pubic-bookmarks-sinatracd pubic-bookmarks-sinatra vim public-bookmarks.rb1234require 'sinatra'get '/' do "#&#123;['Hello', 'Hi', 'Hey', 'Yo'][rand(4)]&#125; World!"end vim Gemfile123source 'https://rubygems.org' #gem源自行修改gem 'sinatra'ruby '2.1.2' Note: bundle vim config.ru12require './public-bookmarks'run Sinatra::Application 1rackup -p 4567 layout 12345# public-bookmarks.rbrequire 'sinatra'get '/' do erb :hello_worldend 1mkdir -p views 12#vim views/hello_world.erb&lt;%= ['Hello', 'Hi', 'Hey', 'Yo'][rand(4)] %&gt; World! layout123456789&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;PublicBookmarksSinatra&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;%= yield %&gt;&lt;/body&gt;&lt;/html&gt; Use ActiveRecord 1234# vim Gemfilegem 'sinatra-activerecord'gem 'pg'gem 'rake' Note: bundle config/database.yml 1234567#vim database.ymldevelopment: adapter: postgresql database: public-bookmarks-sinatra_development host: localhost username: postgres password: root 123# vim Rakefilerequire 'sinatra/activerecord/rake'require './public-bookmarks' 然后在主文件里引入12345678# public-bookmarks.rbrequire 'sinatra'require 'sinatra/activerecord'get '/' do db_time = database.connection.execute('SELECT CURRENT_TIMESTAMP').first['now'] request.logger.info "DB time is #&#123;db_time&#125;" erb :hello_worldend 现在重新启动下试试12rake db:createrackup -p 4567 可以在后台日志看见相关的输出信息。 Build model 12# 首先指定并创建一个migration的名字为create_public_bookmarksrake db:create_migration NAME=create_public_bookmarks 然后打开这个文件 并且写入相关字段1234567891011121314# db/migrate/YYYYMMDDHHMMSS_create_public_bookmarks.rbclass CreatePublicBookmarks &lt; ActiveRecord::Migration def change create_table :public_bookmarks do |t| t.string :title t.string :url t.text :description t.string :submitter_email t.timestamps end add_index :public_bookmarks, :url, unique: true endend 执行迁移文件1rake db:migrate 接下来创建 public_bookmark model1mkdir models 123# vim models/public_bookmark.rbclass PublicBookmark &lt; ActiveRecord::Baseend 接下来我们需要在主文件里指定model1234#public-bookmarks.rb...require './models/public_bookmark'... Build Controllers Note: 在一些时候，我们需要类似rails的notice等闪存方式来提示信息。所以需要安装一个gem. 1234# Gemfile...gem 'rack-flash3'... Note: bundle 这个和model类似，需要在主文件内部指定实用。12345678# public-bookmarks.rb...require './models/public_bookmark'require 'rack-flash'enable :sessionsuse Rack::Flash... 基本的配置差不多就这样，接下来，可以给controller填充一些action123456789101112131415161718192021222324get '/public_bookmarks' do @public_bookmarks = PublicBookmark.all erb :'public_bookmarks/index'endget '/public_bookmarks/new' do @public_bookmark = PublicBookmark.new erb :'public_bookmarks/new'endget '/public_bookmarks/:id' do @public_bookmark = PublicBookmark.find(params[:id]) erb :'public_bookmarks/show'endpost '/public_bookmarks/create' do @public_bookmark = PublicBookmark.new(params[:public_bookmark]) if @public_bookmark.save flash[:notice] = 'Public bookmark successfully created!' redirect to("public_bookmarks/#&#123;@public_bookmark.id&#125;") else erb :'public_bookmarks/new' endend 然后就可以在views下创建一个public_bookmarks文件夹，创建对应的view.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124#views/public_bookmarks/index.erb:&lt;span&gt;Listing public_bookmarks&lt;/span&gt;&lt;p id="notice"&gt;&lt;%= flash[:notice] %&gt;&lt;/p&gt;&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Title&lt;/th&gt; &lt;th&gt;Url&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;th&gt;Submitter email&lt;/th&gt; &lt;th colspan="3"&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;% @public_bookmarks.each do |public_bookmark| %&gt; &lt;tr&gt; &lt;td&gt;&lt;%= public_bookmark.title %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= public_bookmark.url %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= public_bookmark.description %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= public_bookmark.submitter_email %&gt;&lt;/td&gt; &lt;td&gt; &lt;a href="/public_bookmarks/&lt;%= public_bookmark.id %&gt;"&gt; Show &lt;/a&gt; &lt;/td&gt; &lt;% if @authenticated %&gt; &lt;td&gt; &lt;form action="/public_bookmarks/destroy/&lt;%= public_bookmark.id %&gt;" method='post'&gt; &lt;input type='submit' value='Destroy' onclick="return confirm('Are you sure?')"&gt; &lt;/form&gt; &lt;/td&gt; &lt;% end %&gt; &lt;/tr&gt; &lt;% end %&gt; &lt;/tbody&gt;&lt;/table&gt;&lt;br&gt;&lt;a href='/public_bookmarks/new'&gt; New Public Bookmark&lt;/a&gt;#views/public_bookmarks/show.erb:&lt;p id="notice"&gt;&lt;%= flash[:notice] %&gt;&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Title:&lt;/strong&gt; &lt;%= @public_bookmark.title %&gt;&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Url:&lt;/strong&gt; &lt;%= @public_bookmark.url %&gt;&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Description:&lt;/strong&gt; &lt;%= @public_bookmark.description %&gt;&lt;/p&gt;&lt;p&gt; &lt;strong&gt;Submitter email:&lt;/strong&gt; &lt;%= @public_bookmark.submitter_email %&gt;&lt;/p&gt;&lt;a href='/public_bookmarks'&gt; Back&lt;/a&gt;# views/public_bookmarks/new.erb:&lt;span&gt;New public_bookmark&lt;/span&gt;&lt;%= erb :'public_bookmarks/form' %&gt;&lt;a href='/public_bookmarks'&gt; Back&lt;/a&gt;# views/public_bookmarks/form.erb:&lt;form action="/public_bookmarks/create" method='post'&gt; &lt;% if @public_bookmark.errors.any? %&gt; &lt;div id="error_explanation"&gt; &lt;span&gt;&lt;%= pluralize(@public_bookmark.errors.count, "error") %&gt; prohibited this public_bookmark from being saved:&lt;/span&gt; &lt;ul&gt; &lt;% @public_bookmark.errors.full_messages.each do |message| %&gt; &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt; &lt;% end %&gt; &lt;/ul&gt; &lt;/div&gt; &lt;% end %&gt; &lt;div class="field"&gt; &lt;label for="public_bookmark_title"&gt;Title&lt;/label&gt;&lt;br&gt; &lt;input id="public_bookmark_title" name="public_bookmark[title]" type="text"&gt; &lt;/div&gt; &lt;div class="field"&gt; &lt;label for="public_bookmark_url"&gt;Url&lt;/label&gt;&lt;br&gt; &lt;input id="public_bookmark_url" name="public_bookmark[url]" type="text"&gt; &lt;/div&gt; &lt;div class="field"&gt; &lt;label for="public_bookmark_description"&gt;Description&lt;/label&gt;&lt;br&gt; &lt;textarea id="public_bookmark_description" name="public_bookmark[description]"&gt;&lt;/textarea&gt; &lt;/div&gt; &lt;div class="field"&gt; &lt;label for="public_bookmark_submitter_email"&gt;Submitter email&lt;/label&gt;&lt;br&gt; &lt;input id="public_bookmark_submitter_email" name="public_bookmark[submitter_email]" type="text"&gt; &lt;/div&gt; &lt;div class="actions"&gt; &lt;input type="submit" value="Create Public bookmark"&gt; &lt;/div&gt;&lt;/form&gt; 原文githubblog原文]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>sinatra</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu查看postgresql操作日志]]></title>
    <url>%2F2016%2F10%2F24%2Fubuntu%E6%9F%A5%E7%9C%8Bpostgresql%E6%93%8D%E4%BD%9C%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[配置 pg(9.3)/etc/postgresql/9.3/main下找到postgresql.conf 1234# sudo vim postgresql.conflogging_collector = on # 默认是off,记得去除注释log_directory = 'pg_log' # 取消注释log_statement = 'none' # none, ddl, mod, all, 这里设置成aoo 注意: pg_log在$pgdata文件夹里.查找$pgdata1ps auxw | grep postgres | grep -- -D 可以找到对应的文件夹位置.我的是在/var/lib/postgresql/9.5/main下面. 目前是没有这个pg_log文件夹,因为我们还没有重启生效这个操作. 1sudo service postgresql restart 然后运行了pg之后,可以发现有pg_log1tail f /var/lib/postgresql/9.5/main/postgresql-2016-10-24_175049.log blog原文]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>日志</tag>
        <tag>pg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rails capistrano nginx puma部署]]></title>
    <url>%2F2016%2F08%2F26%2Frails-capistrano-nginx-puma%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[项目进入测试的阶段，要部署到staging环境进行监测。之前一直是使用的passanger服务器来跑的。最近换了puma，来说下总结吧。具体的环境安装就不再阐述。 相关库的添加 添加gem首先需要在gemfile.rb添加: 123456789group :development do gem 'capistrano', '~&gt; 3.3.0' gem 'capistrano-rvm' gem 'capistrano-rails-console' gem 'capistrano-bundler', '~&gt; 1.1.2' gem 'capistrano-rails', '~&gt; 1.1' gem 'capistrano3-puma', require: false gem 'capistrano-sidekiq'end bundle cap install.会有如下文件生成 1234567mkdir -p config/deploycreate config/deploy.rbcreate config/deploy/staging.rbcreate config/deploy/production.rbmkdir -p lib/capistrano/taskscreate CapfileCapified 相关配置 Capfile 1234567891011121314151617181920212223242526272829# Load DSL and set up stagesrequire 'capistrano/setup'# Include default deployment tasksrequire 'capistrano/deploy'# Include tasks from other gems included in your Gemfile## For documentation on these, see for example:## https://github.com/capistrano/rvm# https://github.com/capistrano/rbenv# https://github.com/capistrano/chruby# https://github.com/capistrano/bundler# https://github.com/capistrano/rails# https://github.com/capistrano/passenger#require 'capistrano/rvm'# require 'capistrano/rbenv'# require 'capistrano/chruby'require 'capistrano/bundler'require 'capistrano/rails/assets'require 'capistrano/rails/migrations'# require 'capistrano/passenger'require 'capistrano/puma'require 'capistrano/sidekiq'# Load custom tasks from `lib/capistrano/tasks' if you have any definedDir.glob('lib/capistrano/tasks/*.rake').each &#123; |r| import r &#125; 无非就是添加了几个require．（gemfile添加的capistrano相关gem可以require） config/deploy.rb 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121 # config valid only for current version of Capistranolock '3.3.5'set :application, 'appname'set :repo_url, 'git@github.com:example/appname.git'# Default branch is :master# ask :branch, proc &#123; `git rev-parse --abbrev-ref HEAD`.chomp &#125;.call# Default deploy_to directory is /var/www/my_app_nameset :deploy_to, '/home/ubuntu/www/appname'set :html_deploy_to, "#&#123;fetch(:deploy_to)&#125;/html"# Default value for :scm is :gitset :scm, :gitset :user, 'ubuntu'# Default value for :format is :pretty# set :format, :pretty# Default value for :log_level is :debug# set :log_level, :debug# Default value for :pty is false# set :puma_init_active_record, true # Change to false when not using ActiveRecord# Default value for :linked_files is []set :linked_files, fetch(:linked_files, []).push('config/database.yml', '.ruby-version', '.ruby-gemset')# Default value for linked_dirs is []set :linked_dirs, fetch(:linked_dirs, []).push('bin', 'log', 'tmp/pids', 'tmp/cache', 'tmp/sockets', 'vendor/bundle', 'public/system')# Default value for default_env is &#123;&#125;# set :default_env, &#123; path: "/opt/ruby/bin:$PATH" &#125;# Default value for keep_releases is 5set :keep_releases, 5set :default_env, &#123; rvm_bin_path: '~/.rvm/bin' &#125;# namespace :puma do# desc 'Create Directories for Puma Pids and Socket'# task :make_dirs do# on roles(:app) do# execute "mkdir #&#123;shared_path&#125;/tmp/sockets -p"# execute "mkdir #&#123;shared_path&#125;/tmp/pids -p"# end# end## before :start, :make_dirs# endset :puma_threads, [4, 16]set :puma_workers, 0# Don't change these unless you know what you're doingset :pty, trueset :use_sudo, falseset :stage, :productionset :deploy_via, :remote_cacheset :deploy_to, "/home/#&#123;fetch(:user)&#125;/www/#&#123;fetch(:application)&#125;"set :puma_bind, "unix://#&#123;shared_path&#125;/tmp/sockets/appname-puma.sock"set :puma_state, "#&#123;shared_path&#125;/tmp/pids/puma.state"set :puma_pid, "#&#123;shared_path&#125;/tmp/pids/puma.pid"set :puma_access_log, "#&#123;release_path&#125;/log/puma.error.log"set :puma_error_log, "#&#123;release_path&#125;/log/puma.access.log"set :ssh_options, &#123; forward_agent: true, user: fetch(:user), keys: %w(~/.ssh/id_rsa.pub) &#125;set :puma_preload_app, trueset :puma_worker_timeout, nilset :puma_init_active_record, true # Change to false when not using ActiveRecord## Defaults:# set :scm, :gitset :branch, :staging# set :format, :pretty# set :log_level, :debug# set :keep_releases, 5namespace :puma do desc 'Create Directories for Puma Pids and Socket' task :make_dirs do on roles(:app) do execute "mkdir #&#123;shared_path&#125;/tmp/sockets -p" execute "mkdir #&#123;shared_path&#125;/tmp/pids -p" end end before :start, :make_dirsendnamespace :deploy do desc "Make sure local git is in sync with remote." task :check_revision do on roles(:app) do unless `git rev-parse HEAD` == `git rev-parse origin/master` puts "WARNING: HEAD is not the same as origin/master" puts "Run `git push` to sync changes." exit end end end desc 'Initial Deploy' task :initial do on roles(:app) do before 'deploy:restart', 'puma:start' invoke 'deploy' end end desc 'Restart application' task :restart do on roles(:app), in: :sequence, wait: 5 do invoke 'puma:restart' end end before :starting, :check_revision after :finishing, :compile_assets after :finishing, :cleanup after :finishing, :restartend# ps aux | grep puma # Get puma pid# kill -s SIGUSR2 pid # Restart puma# kill -s SIGTERM pid # Stop puma config/deploy/staging.rb 12345678910111213141516171819202122232425role :app, %w&#123;ubuntu@114.11.11.11&#125;role :web, %w&#123;ubuntu@114.11.11.11&#125;role :db, %w&#123;ubuntu@114.11.11.11&#125;# 183.156.126.167set :deploy_to, "/home/ubuntu/www/appname"# Extended Server Syntax# ======================# This can be used to drop a more detailed server definition into the# server list. The second argument is a, or duck-types, Hash and is# used to set extended properties on the server.# set :bundle_gemfile, "ajax/Gemfile"# set :rvm_type, :ubuntu# server '183.156.126.167', user: 'deploy', roles: %w&#123;web app db&#125;, my_property: :my_valueset :branch, 'staging'set :rails_env, "staging"set :nginx_server_name, "example.com"set :rvm_ruby_version, '2.3.0'# set :rvm_type, :ossset :monit_role, :allset :html_branch, 'development' vim config/nginx.conf 12345678910111213141516171819202122232425262728293031upstream puma &#123; server unix:///home/ubuntu/www/app/shared/tmp/sockets/appname-puma.sock;&#125;server &#123; listen 80; server_name example.com; root /home/ubuntu/www/app/current/public; access_log /home/ubuntu/www/app/current/log/nginx.access.log; error_log /home/ubuntu/www/app/current/log/nginx.error.log info; location ^~ /assets/ &#123; gzip_static on; expires max; add_header Cache-Control public; &#125; try_files $uri/index.html $uri @puma; location @puma &#123; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_redirect off; proxy_pass http://puma; &#125; error_page 500 502 503 504 /500.html; client_max_body_size 10M; keepalive_timeout 10;&#125; 上面的三个文件需要根据自己的实际情况去修改．然后我们需要登录到远程服务器去再操作.123sudo rm /etc/nginx/sites-enabled/default #删除默认的nginx配置sudo ln -nfs "/home/ubuntu/www/appname/current/config/nginx.conf" "/etc/nginx/sites-enabled/appname"# 软连接项目nginx配置到nginx服务器 ok,重启nginx.然后可以线上查看下puma进程ps aux| grep puma 如果页面是空白，请重启puma尝试。cat puma.pid | xargs kill -SIGUSR2 注意 Note: If you make changes to your config/nginx.conf file, you’ll have to reload or restart your Nginx service on the server after deploying your app:sudo service nginx restart 遇到的问题 部署完成之后，部署的日志显示puma重启成功，但是实际是未启动成功. 检查了很久，看了日志报错 bundler: failed to load command: puma (/home/ubuntu/www/appname/shared/bundle/ruby/2.3.0/bin/puma) 原因是因为deploy.rb中的application 名字和服务器路径的appname不一致导致。改下名字就好了。 puma.sock无法改变名字 先在deploy.rb中改变名字 如:1"unix://#&#123;shared_path&#125;/tmp/sockets/new-puma.sock" 然后在nginx.conf中改变:1"unix://#&#123;shared_path&#125;/tmp/sockets/new-puma.sock" 提交到远程分支之后，初始化puma的配置,如下：1bundle exec cap staging puma:config 这个时候，他会在/home/ubuntu/www/appname/shared/下新建puma.rb.因为改变了nginx.conf，所以需要重新加载nginx:1sudo service nginx reload 重启nginx1sudo service nginx restart 这个时候，你会发现/home/ubuntu/www/appname/shared/tmp/sockets 存在一个new-puma.sock blog原文]]></content>
      <categories>
        <category>迁移</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>部署</tag>
      </tags>
  </entry>
</search>
